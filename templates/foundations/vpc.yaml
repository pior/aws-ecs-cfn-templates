AWSTemplateFormatVersion: 2010-09-09
Description: VPC for application

Parameters:

  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: Allowed SSH source (default can be accessed from anywhere)
    MaxLength: 18
    MinLength: 9
    Type: String


Mappings:
  SubnetConfig:
    PublicA:
      CIDR: 10.0.0.0/24
    PublicB:
      CIDR: 10.0.1.0/24
    VPC:
      CIDR: 10.0.0.0/16

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

#--- SUBNETS

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: { "Fn::Select" : ["0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]}
      CidrBlock: !FindInMap [SubnetConfig, PublicA, CIDR]
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: { "Fn::Select" : ["1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]}
      CidrBlock: !FindInMap [SubnetConfig, PublicB, CIDR]
      MapPublicIpOnLaunch: true

#--- GATEWAY

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

#--- ROUTES

# A

  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application,
        Value: !Ref AWS::StackId

  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA

  PublicRouteA:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA

# B

  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application,
        Value: !Ref AWS::StackId

  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

  PublicRouteB:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB

#--- ACL

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId

  PublicSubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetA

  PublicSubnetNetworkAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetB

#--- ACL entries

# - Allow everything

  InboundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

  OutboundNetworkAclEntryA:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicNetworkAcl
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100

#---

Outputs:

  Vpc:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-vpc"

  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-vpc-id"

  SubnetA:
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-public-subnet-a"

  SubnetB:
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-public-subnet-b"

  ZoneA:
    Value: !GetAtt [PublicSubnetA, AvailabilityZone]
    Export:
      Name: !Sub "${AWS::StackName}-public-zone-a"

  ZoneB:
    Value: !GetAtt [PublicSubnetB, AvailabilityZone]
    Export:
      Name: !Sub "${AWS::StackName}-public-zone-b"
